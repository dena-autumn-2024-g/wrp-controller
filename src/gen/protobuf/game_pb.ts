// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file protobuf/game.proto (package water_ring, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * 移動方向の列挙型
 *
 * @generated from enum water_ring.Direction
 */
export enum Direction {
  /**
   * @generated from enum value: DIRECTION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: DIRECTION_LEFT = 1;
   */
  LEFT = 1,

  /**
   * @generated from enum value: DIRECTION_RIGHT = 2;
   */
  RIGHT = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Direction)
proto3.util.setEnumType(Direction, "water_ring.Direction", [
  { no: 0, name: "DIRECTION_UNSPECIFIED" },
  { no: 1, name: "DIRECTION_LEFT" },
  { no: 2, name: "DIRECTION_RIGHT" },
]);

/**
 * ゲーム開始ボタンを押したリクエスト
 *
 * @generated from message water_ring.StartGameStreamRequest
 */
export class StartGameStreamRequest extends Message<StartGameStreamRequest> {
  /**
   * ルームID
   *
   * @generated from field: string room_id = 1;
   */
  roomId = "";

  constructor(data?: PartialMessage<StartGameStreamRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "water_ring.StartGameStreamRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "room_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): StartGameStreamRequest {
    return new StartGameStreamRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): StartGameStreamRequest {
    return new StartGameStreamRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): StartGameStreamRequest {
    return new StartGameStreamRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | StartGameStreamRequest
      | PlainMessage<StartGameStreamRequest>
      | undefined,
    b:
      | StartGameStreamRequest
      | PlainMessage<StartGameStreamRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(StartGameStreamRequest, a, b);
  }
}

/**
 * ボタン押下に関する通知メッセージ (押した)
 *
 * @generated from message water_ring.PushButtonRequest
 */
export class PushButtonRequest extends Message<PushButtonRequest> {
  /**
   * ボタンを押したユーザーID
   *
   * @generated from field: int32 user_id = 1;
   */
  userId = 0;

  /**
   * ルームID
   *
   * @generated from field: string room_id = 2;
   */
  roomId = "";

  constructor(data?: PartialMessage<PushButtonRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "water_ring.PushButtonRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "room_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): PushButtonRequest {
    return new PushButtonRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): PushButtonRequest {
    return new PushButtonRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): PushButtonRequest {
    return new PushButtonRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: PushButtonRequest | PlainMessage<PushButtonRequest> | undefined,
    b: PushButtonRequest | PlainMessage<PushButtonRequest> | undefined,
  ): boolean {
    return proto3.util.equals(PushButtonRequest, a, b);
  }
}

/**
 * @generated from message water_ring.PushButtonResponse
 */
export class PushButtonResponse extends Message<PushButtonResponse> {
  constructor(data?: PartialMessage<PushButtonResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "water_ring.PushButtonResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): PushButtonResponse {
    return new PushButtonResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): PushButtonResponse {
    return new PushButtonResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): PushButtonResponse {
    return new PushButtonResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: PushButtonResponse | PlainMessage<PushButtonResponse> | undefined,
    b: PushButtonResponse | PlainMessage<PushButtonResponse> | undefined,
  ): boolean {
    return proto3.util.equals(PushButtonResponse, a, b);
  }
}

/**
 * ボタン押下に関する通知メッセージ (離した)
 *
 * @generated from message water_ring.ReleaseButtonRequest
 */
export class ReleaseButtonRequest extends Message<ReleaseButtonRequest> {
  /**
   * ボタンを離したユーザーID
   *
   * @generated from field: int32 user_id = 1;
   */
  userId = 0;

  /**
   * ルームID
   *
   * @generated from field: string room_id = 2;
   */
  roomId = "";

  constructor(data?: PartialMessage<ReleaseButtonRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "water_ring.ReleaseButtonRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "room_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): ReleaseButtonRequest {
    return new ReleaseButtonRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): ReleaseButtonRequest {
    return new ReleaseButtonRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ReleaseButtonRequest {
    return new ReleaseButtonRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: ReleaseButtonRequest | PlainMessage<ReleaseButtonRequest> | undefined,
    b: ReleaseButtonRequest | PlainMessage<ReleaseButtonRequest> | undefined,
  ): boolean {
    return proto3.util.equals(ReleaseButtonRequest, a, b);
  }
}

/**
 * @generated from message water_ring.ReleaseButtonResponse
 */
export class ReleaseButtonResponse extends Message<ReleaseButtonResponse> {
  constructor(data?: PartialMessage<ReleaseButtonResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "water_ring.ReleaseButtonResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): ReleaseButtonResponse {
    return new ReleaseButtonResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): ReleaseButtonResponse {
    return new ReleaseButtonResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ReleaseButtonResponse {
    return new ReleaseButtonResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: ReleaseButtonResponse | PlainMessage<ReleaseButtonResponse> | undefined,
    b: ReleaseButtonResponse | PlainMessage<ReleaseButtonResponse> | undefined,
  ): boolean {
    return proto3.util.equals(ReleaseButtonResponse, a, b);
  }
}

/**
 * 移動に関する通知メッセージ
 *
 * @generated from message water_ring.MoveRequest
 */
export class MoveRequest extends Message<MoveRequest> {
  /**
   * 移動したユーザーID
   *
   * @generated from field: int32 user_id = 1;
   */
  userId = 0;

  /**
   * 移動方向
   *
   * @generated from field: water_ring.Direction direction = 2;
   */
  direction = Direction.UNSPECIFIED;

  /**
   * ルームID
   *
   * @generated from field: string room_id = 3;
   */
  roomId = "";

  constructor(data?: PartialMessage<MoveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "water_ring.MoveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    {
      no: 2,
      name: "direction",
      kind: "enum",
      T: proto3.getEnumType(Direction),
    },
    { no: 3, name: "room_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): MoveRequest {
    return new MoveRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): MoveRequest {
    return new MoveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): MoveRequest {
    return new MoveRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: MoveRequest | PlainMessage<MoveRequest> | undefined,
    b: MoveRequest | PlainMessage<MoveRequest> | undefined,
  ): boolean {
    return proto3.util.equals(MoveRequest, a, b);
  }
}

/**
 * @generated from message water_ring.MoveResponse
 */
export class MoveResponse extends Message<MoveResponse> {
  constructor(data?: PartialMessage<MoveResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "water_ring.MoveResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): MoveResponse {
    return new MoveResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): MoveResponse {
    return new MoveResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): MoveResponse {
    return new MoveResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: MoveResponse | PlainMessage<MoveResponse> | undefined,
    b: MoveResponse | PlainMessage<MoveResponse> | undefined,
  ): boolean {
    return proto3.util.equals(MoveResponse, a, b);
  }
}

/**
 * ゲーム中のイベント通知メッセージ
 *
 * @generated from message water_ring.StartGameStreamResponse
 */
export class StartGameStreamResponse extends Message<StartGameStreamResponse> {
  /**
   * @generated from oneof water_ring.StartGameStreamResponse.event
   */
  event:
    | {
        /**
         * ボタン押下の通知 (押した)
         *
         * @generated from field: water_ring.PushButtonRequest push_button_pressed = 1;
         */
        value: PushButtonRequest;
        case: "pushButtonPressed";
      }
    | {
        /**
         * ボタン押下の通知 (離した)
         *
         * @generated from field: water_ring.ReleaseButtonRequest push_button_released = 2;
         */
        value: ReleaseButtonRequest;
        case: "pushButtonReleased";
      }
    | {
        /**
         * @generated from field: water_ring.MoveRequest move_button = 3;
         */
        value: MoveRequest;
        case: "moveButton";
      }
    | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<StartGameStreamResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "water_ring.StartGameStreamResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "push_button_pressed",
      kind: "message",
      T: PushButtonRequest,
      oneof: "event",
    },
    {
      no: 2,
      name: "push_button_released",
      kind: "message",
      T: ReleaseButtonRequest,
      oneof: "event",
    },
    {
      no: 3,
      name: "move_button",
      kind: "message",
      T: MoveRequest,
      oneof: "event",
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): StartGameStreamResponse {
    return new StartGameStreamResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): StartGameStreamResponse {
    return new StartGameStreamResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): StartGameStreamResponse {
    return new StartGameStreamResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | StartGameStreamResponse
      | PlainMessage<StartGameStreamResponse>
      | undefined,
    b:
      | StartGameStreamResponse
      | PlainMessage<StartGameStreamResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(StartGameStreamResponse, a, b);
  }
}
