// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file protobuf/room.proto (package water_ring, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * 部屋の作成リクエストとレスポンス
 *
 * @generated from message water_ring.CreateRoomRequest
 */
export class CreateRoomRequest extends Message<CreateRoomRequest> {
  constructor(data?: PartialMessage<CreateRoomRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "water_ring.CreateRoomRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateRoomRequest {
    return new CreateRoomRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateRoomRequest {
    return new CreateRoomRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateRoomRequest {
    return new CreateRoomRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: CreateRoomRequest | PlainMessage<CreateRoomRequest> | undefined,
    b: CreateRoomRequest | PlainMessage<CreateRoomRequest> | undefined,
  ): boolean {
    return proto3.util.equals(CreateRoomRequest, a, b);
  }
}

/**
 * @generated from message water_ring.CreateRoomResponse
 */
export class CreateRoomResponse extends Message<CreateRoomResponse> {
  /**
   * 入室用のURL
   *
   * @generated from field: string room_url = 1;
   */
  roomUrl = "";

  /**
   * (UUID)
   *
   * @generated from field: string room_id = 2;
   */
  roomId = "";

  constructor(data?: PartialMessage<CreateRoomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "water_ring.CreateRoomResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "room_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "room_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateRoomResponse {
    return new CreateRoomResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateRoomResponse {
    return new CreateRoomResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateRoomResponse {
    return new CreateRoomResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: CreateRoomResponse | PlainMessage<CreateRoomResponse> | undefined,
    b: CreateRoomResponse | PlainMessage<CreateRoomResponse> | undefined,
  ): boolean {
    return proto3.util.equals(CreateRoomResponse, a, b);
  }
}

/**
 * 部屋を閉じるリクエスト
 *
 * @generated from message water_ring.CloseRoomRequest
 */
export class CloseRoomRequest extends Message<CloseRoomRequest> {
  /**
   * ルームID
   *
   * @generated from field: string room_id = 1;
   */
  roomId = "";

  constructor(data?: PartialMessage<CloseRoomRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "water_ring.CloseRoomRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "room_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CloseRoomRequest {
    return new CloseRoomRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CloseRoomRequest {
    return new CloseRoomRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CloseRoomRequest {
    return new CloseRoomRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: CloseRoomRequest | PlainMessage<CloseRoomRequest> | undefined,
    b: CloseRoomRequest | PlainMessage<CloseRoomRequest> | undefined,
  ): boolean {
    return proto3.util.equals(CloseRoomRequest, a, b);
  }
}

/**
 * 部屋にユーザーが参加するのを待つリクエスト
 *
 * @generated from message water_ring.WaitForUserJoinRequest
 */
export class WaitForUserJoinRequest extends Message<WaitForUserJoinRequest> {
  /**
   * ルームID
   *
   * @generated from field: string room_id = 1;
   */
  roomId = "";

  constructor(data?: PartialMessage<WaitForUserJoinRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "water_ring.WaitForUserJoinRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "room_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): WaitForUserJoinRequest {
    return new WaitForUserJoinRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): WaitForUserJoinRequest {
    return new WaitForUserJoinRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): WaitForUserJoinRequest {
    return new WaitForUserJoinRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | WaitForUserJoinRequest
      | PlainMessage<WaitForUserJoinRequest>
      | undefined,
    b:
      | WaitForUserJoinRequest
      | PlainMessage<WaitForUserJoinRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(WaitForUserJoinRequest, a, b);
  }
}

/**
 * 部屋にユーザーが参加した通知メッセージ
 *
 * @generated from message water_ring.WaitForUserJoinResponse
 */
export class WaitForUserJoinResponse extends Message<WaitForUserJoinResponse> {
  /**
   * 参加したユーザーID
   *
   * @generated from field: int32 user_id = 1;
   */
  userId = 0;

  constructor(data?: PartialMessage<WaitForUserJoinResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "water_ring.WaitForUserJoinResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): WaitForUserJoinResponse {
    return new WaitForUserJoinResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): WaitForUserJoinResponse {
    return new WaitForUserJoinResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): WaitForUserJoinResponse {
    return new WaitForUserJoinResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | WaitForUserJoinResponse
      | PlainMessage<WaitForUserJoinResponse>
      | undefined,
    b:
      | WaitForUserJoinResponse
      | PlainMessage<WaitForUserJoinResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(WaitForUserJoinResponse, a, b);
  }
}

/**
 * @generated from message water_ring.JoinRoomRequest
 */
export class JoinRoomRequest extends Message<JoinRoomRequest> {
  /**
   * ルームID
   *
   * @generated from field: string room_id = 1;
   */
  roomId = "";

  constructor(data?: PartialMessage<JoinRoomRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "water_ring.JoinRoomRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "room_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): JoinRoomRequest {
    return new JoinRoomRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): JoinRoomRequest {
    return new JoinRoomRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): JoinRoomRequest {
    return new JoinRoomRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: JoinRoomRequest | PlainMessage<JoinRoomRequest> | undefined,
    b: JoinRoomRequest | PlainMessage<JoinRoomRequest> | undefined,
  ): boolean {
    return proto3.util.equals(JoinRoomRequest, a, b);
  }
}

/**
 * @generated from message water_ring.JoinRoomResponse
 */
export class JoinRoomResponse extends Message<JoinRoomResponse> {
  /**
   * ユーザーID
   *
   * @generated from field: int32 user_id = 1;
   */
  userId = 0;

  constructor(data?: PartialMessage<JoinRoomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "water_ring.JoinRoomResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): JoinRoomResponse {
    return new JoinRoomResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): JoinRoomResponse {
    return new JoinRoomResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): JoinRoomResponse {
    return new JoinRoomResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: JoinRoomResponse | PlainMessage<JoinRoomResponse> | undefined,
    b: JoinRoomResponse | PlainMessage<JoinRoomResponse> | undefined,
  ): boolean {
    return proto3.util.equals(JoinRoomResponse, a, b);
  }
}

/**
 * @generated from message water_ring.CloseRoomResponse
 */
export class CloseRoomResponse extends Message<CloseRoomResponse> {
  constructor(data?: PartialMessage<CloseRoomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "water_ring.CloseRoomResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CloseRoomResponse {
    return new CloseRoomResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CloseRoomResponse {
    return new CloseRoomResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CloseRoomResponse {
    return new CloseRoomResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: CloseRoomResponse | PlainMessage<CloseRoomResponse> | undefined,
    b: CloseRoomResponse | PlainMessage<CloseRoomResponse> | undefined,
  ): boolean {
    return proto3.util.equals(CloseRoomResponse, a, b);
  }
}
